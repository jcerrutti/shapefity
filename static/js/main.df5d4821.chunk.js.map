{"version":3,"sources":["components/customShapes/Parallelogram.js","services/shape.js","utils/calcs.js","components/customShapes/TextInformation.js","components/board/Board.js","components/about/About.js","App.js","serviceWorker.js","index.js"],"names":["Parallelogram","props","points","stroke","fill","shadowBlur","closed","getParallelogramInformation","parallelogramFourthCoordinate","x1","y1","x2","y2","getParallelogramFourthVertex","parallelogramCenter","getParallelogramCenter","getCircleInformation","parallelogramPoints","x3","y3","AB","Math","sqrt","pow","BC","AC","angleDegRad","acos","circleArea","abs","sin","PI","getCircleRadius","TextInformation","text","textInformation","map","key","value","Board","onResetClickHandler","setState","getDefaultState","circles","parallelogramDrawed","circleRadius","circleCoordinates","onStateClickHandler","evt","state","layerX","layerY","prevState","addPoints","onDragPointHandler","index","updatePoints","x","y","newPoints","startIndex","fourthCoordinate","length","prevPoints","pointX","pointY","this","onClick","className","width","height","radius","draggable","onDragMove","e","Component","About","href","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df5d4821.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Line } from 'react-konva';\n\nexport default function Parallelogram(props) {\n  const { points } = props;\n  return <Line points={points} stroke={'blue'} fill={null} shadowBlur={10} closed={true} />;\n}\n","import {\n  getParallelogramFourthVertex,\n  getParallelogramCenter,\n  getCircleRadius,\n} from '../utils/calcs';\n\nexport function getParallelogramInformation(points) {\n  const parallelogramFourthCoordinate = getParallelogramFourthVertex(\n    [points[0], points[1]],\n    [points[2], points[3]],\n    [points[4], points[5]]\n  );\n\n  const parallelogramCenter = getParallelogramCenter(\n    [points[0], points[1]],\n    [points[4], points[5]]\n  );\n\n  return {\n    parallelogramFourthCoordinate,\n    parallelogramCenter,\n  };\n}\n\nexport function getCircleInformation(parallelogramPoints) {\n  return getCircleRadius(\n    [parallelogramPoints[0], parallelogramPoints[1]],\n    [parallelogramPoints[2], parallelogramPoints[3]],\n    [parallelogramPoints[4], parallelogramPoints[5]]\n  );\n}\n","export function getParallelogramFourthVertex([x1, y1], [x2, y2], [x3, y3]) {\n  const x4 = x1 + (x3 - x2);\n  const y4 = y1 + (y3 - y2);\n\n  return [x4, y4];\n}\n\nexport function getParallelogramCenter([x1, y1], [x3, y3]) {\n  const x = (x1 + x3) / 2;\n  const y = (y1 + y3) / 2;\n\n  return [x, y];\n}\n\nexport function getCircleRadius([x1, y1], [x2, y2], [x3, y3]) {\n  var AB = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n  var BC = Math.sqrt(Math.pow(x2 - x3, 2) + Math.pow(y2 - y3, 2));\n  var AC = Math.sqrt(Math.pow(x3 - x1, 2) + Math.pow(y3 - y1, 2));\n  const angleDegRad = Math.acos((BC * BC + AB * AB - AC * AC) / (2 * BC * AB));\n\n  const circleArea = Math.abs(AB * BC * Math.sin(angleDegRad));\n  const circleRadius = Math.sqrt(circleArea / Math.PI);\n\n  return circleRadius;\n}\n","import React from 'react';\n\nimport { Text } from 'react-konva';\n\nexport default function TextInformation({ textInformation }) {\n  const text = textInformation.map(({ key, value }) => {\n    return `${key}: ${value}`;\n  });\n  return <Text text={text}></Text>;\n}\n","import React, { Component } from 'react';\n\nimport { Stage, Layer, Group, Circle } from 'react-konva';\n\nimport './board.css';\nimport Parallelogram from '../customShapes/Parallelogram';\nimport { getParallelogramInformation, getCircleInformation } from '../../services/shape';\nimport TextInformation from '../customShapes/TextInformation';\n\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.getDefaultState();\n  }\n\n  onResetClickHandler = () => {\n    this.setState(this.getDefaultState());\n  };\n\n  getDefaultState = () => {\n    return {\n      circles: [],\n      points: [],\n      parallelogramDrawed: false,\n      circleRadius: null,\n      circleCoordinates: [],\n      textInformation: [],\n    };\n  };\n\n  onStateClickHandler = ({ evt }) => {\n    if (this.state.parallelogramDrawed) return;\n\n    const { layerX, layerY } = evt;\n\n    this.setState(prevState => {\n      return this.addPoints(prevState.points, prevState.circles, layerX, layerY);\n    });\n  };\n\n  addPoints(prevPoints, circles, pointX, pointY) {\n    let newPoints = [...prevPoints, pointX, pointY];\n    let circleRadius = 0;\n    let circleCoordinates = [];\n    let textInformation = [];\n    if (newPoints.length > 5) {\n      const {\n        parallelogramFourthCoordinate: fourthCoordinate,\n        parallelogramCenter,\n      } = getParallelogramInformation(newPoints);\n      circleCoordinates = parallelogramCenter;\n      newPoints = [...newPoints, ...fourthCoordinate];\n\n      circleRadius = getCircleInformation(newPoints);\n\n      textInformation = [\n        {\n          key: 'Shapes Radius',\n          value: circleRadius,\n        },\n      ];\n    }\n    return {\n      circles: [...circles, { x: pointX, y: pointY }],\n      points: newPoints,\n      parallelogramDrawed: newPoints.length === 8,\n      circleCoordinates,\n      circleRadius,\n      textInformation,\n    };\n  }\n\n  onDragPointHandler = ({ evt }, index) => {\n    const { layerX, layerY } = evt;\n\n    this.updatePoints({ x: layerX, y: layerY }, index);\n  };\n\n  updatePoints = ({ x, y }, index) => {\n    this.setState(prevState => {\n      const newPoints = [...prevState.points];\n\n      // Select the starting index, knowing that the points are based on couples (2)\n      const startIndex = index * 2;\n      newPoints[startIndex] = x;\n      newPoints[startIndex + 1] = y;\n\n      const {\n        parallelogramFourthCoordinate: fourthCoordinate,\n        parallelogramCenter,\n      } = getParallelogramInformation(newPoints);\n\n      newPoints[newPoints.length - 2] = fourthCoordinate[0];\n      newPoints[newPoints.length - 1] = fourthCoordinate[1];\n\n      const circleRadius = getCircleInformation(newPoints);\n\n      const textInformation = [\n        {\n          key: 'Shapes Radius',\n          value: circleRadius,\n        },\n      ];\n\n      return {\n        points: newPoints,\n        circleCoordinates: parallelogramCenter,\n        circleRadius,\n        textInformation,\n      };\n    });\n  };\n\n  render() {\n    const {\n      points,\n      circles,\n      parallelogramDrawed,\n      circleCoordinates,\n      circleRadius,\n      textInformation,\n    } = this.state;\n    return (\n      <div>\n        <button onClick={this.onResetClickHandler} className=\"button button-reset\">\n          Reset Board\n        </button>\n        <Stage className=\"stage\" width={700} height={600} onClick={this.onStateClickHandler}>\n          <Layer>\n            <Group>\n              {parallelogramDrawed && (\n                <Circle\n                  x={circleCoordinates[0]}\n                  y={circleCoordinates[1]}\n                  radius={circleRadius}\n                  stroke={'yellow'}\n                ></Circle>\n              )}\n              <TextInformation textInformation={textInformation}></TextInformation>\n              <Parallelogram points={points}></Parallelogram>\n              {circles.map(({ x, y }, index) => (\n                <Circle\n                  key={index}\n                  x={x}\n                  y={y}\n                  radius={6}\n                  fill={'red'}\n                  draggable\n                  onDragMove={e => this.onDragPointHandler(e, index)}\n                ></Circle>\n              ))}\n            </Group>\n          </Layer>\n        </Stage>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport './About.css';\n\nexport default function About() {\n  return (\n    <div className=\"about-section\">\n      <h3>About Shapifity</h3>\n      <p>\n        Shapifity is a shape tool that lets you select 3 random points to draw a parallelogram and a\n        circle with same area, on the center of it.\n      </p>\n      <p>\n        Also, you can play around with the initial 3 points and move it, and you'll see how the\n        shapes changes with the movement.\n      </p>\n      <p>Finally, there is a RESET button, that let you start over again on any moment.</p>\n\n      <h4>Author: Juan Cerrutti</h4>\n      <a href=\"https://github.com/jcerrutti\" target=\"_blank\">\n        /github\n      </a>\n      <br />\n      <a href=\"https://www.linkedin.com/in/juancerrutti/\" target=\"_blank\">\n        /linkedin\n      </a>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Board from './components/board/Board';\nimport About from './components/about/About';\n\nfunction App() {\n  return (\n    <div className=\"main-container\">\n      <div className=\"board-section\">\n        <Board></Board>\n        <About></About>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}